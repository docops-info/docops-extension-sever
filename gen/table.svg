<svg width='800' height='600' xmlns='http://www.w3.org/2000/svg'>
    <text x='400' y='30' font-family='Arial' font-size='20' text-anchor='middle' font-weight='bold' fill='#000000'>Tree
        Chart
    </text>
    <style>
        .node {
            cursor: pointer;
            transition: transform 0.2s, filter 0.2s;
        }

        .node:hover {
            filter: brightness(1.1);
        }

        .node-circle {
            stroke: #e2e8f0;
            stroke-width: 2px;
        }

        .node-label {
            font-family: Arial;
            font-size: 12px;
            text-anchor: middle;
            dominant-baseline: middle;
            pointer-events: none;
        }

        .link {
            fill: none;
            stroke: #94a3b8;
            stroke-width: 1.5px;
        }

        .collapse-icon {
            fill: #000000;
            font-family: Arial;
            font-size: 10px;
            text-anchor: middle;
            dominant-baseline: middle;
            cursor: pointer;
        }
    </style>
    <script type="text/javascript">
        <![CDATA[
        // Tree data
        const treeData = {
            "name": "Root Node",
            "color": "#3498db",
            "children": [{
                "name": "Child Node 1",
                "color": "#2ecc71",
                "children": [{
                    "name": "Grandchild 1.1",
                    "color": "#e74c3c",
                    "children": null
                }, {
                    "name": "Grandchild 1.2",
                    "color": "#f39c12",
                    "children": null
                }]
            }, {
                "name": "Child Node 2",
                "color": "#e74c3c",
                "children": [{
                    "name": "Grandchild 2.1",
                    "color": "#f39c12",
                    "children": null
                }]
            }, {
                "name": "Child Node 3",
                "color": "#f39c12",
                "children": null
            }]
        };

        // Constants for layout
        const margin = {top: 60, right: 20, bottom: 30, left: 20};
        const innerWidth = 800 - margin.left - margin.right;
        const innerHeight = 600 - margin.top - margin.bottom;
        const nodeRadius = 15;
        const orientation = "vertical";
        const initiallyExpanded = true;
        const collapsible = true;

        // Create the tree layout
        function createTreeLayout() {
            const g = document.createElementNS("http://www.w3.org/2000/svg", "g");
            g.setAttribute("transform", "translate('" + margin.left +"','"+margin.top+"')");
            document.querySelector("svg").appendChild(g);

            // Process the data to create a tree structure
            const root = treeData;
            root.x0 = innerWidth / 2;
            root.y0 = 0;

            // Initialize children visibility based on initiallyExpanded
            function initialize(node) {
                if (node.children) {
                    node._children = node.children;
                    if (!initiallyExpanded) {
                        node.children = null;
                    }
                    node._children.forEach(initialize);
                }
            }

            if (collapsible) {
                initialize(root);
            }

            update(root);

            // Function to update the tree visualization
            function update(source) {
                // Compute the new tree layout
                const nodes = [];
                const links = [];

                // Normalize for fixed-depth
                let levelWidth = [1];
                let childCount = function (level, node) {
                    if (node.children && node.children.length > 0) {
                        if (levelWidth.length <= level + 1) levelWidth.push(0);
                        levelWidth[level + 1] += node.children.length;
                        node.children.forEach(function (d) {
                            childCount(level + 1, d);
                        });
                    }
                };
                childCount(0, root);

                // Calculate node positions
                function calculateNodePositions(node, level, index, totalAtLevel) {
                    nodes.push(node);

                    if (orientation === "vertical") {
                        // Vertical layout (top to bottom)
                        node.y = level * 100;
                        node.x = innerWidth * (index + 0.5) / totalAtLevel;
                    } else {
                        // Horizontal layout (left to right)
                        node.x = level * 100;
                        node.y = innerHeight * (index + 0.5) / totalAtLevel;
                    }

                    if (node.children) {
                        const childrenCount = node.children.length;
                        node.children.forEach((child, i) => {
                            calculateNodePositions(child, level + 1, index * childrenCount + i, totalAtLevel * childrenCount);
                        });
                    }
                }

                calculateNodePositions(root, 0, 0, 1);

                // Create links between nodes
                nodes.forEach(function (d) {
                    if (d.parent) {
                        links.push({
                            source: d.parent,
                            target: d
                        });
                    }
                });

                // Remove all existing elements
                g.innerHTML = "";

                // Add links
                links.forEach(function (d) {
                    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
                    path.setAttribute("class", "link");

                    let pathData;
                    if (orientation === "vertical") {
                        // Vertical layout (top to bottom)
                        pathData = `M\$\{d.source.x\},\$\{d.source.y\} C\$\{d.source.x\},\$\{(d.source.y + d.target.y) / 2\}
        \$\{d.target.x\},\$\{(d.source.y + d.target.y) / 2\} \$\{d.target.x\},\$\{d.target.y\}`;
                    } else {
                        // Horizontal layout (left to right)
                        pathData = `M\$\{d.source.x\},\$\{d.source.y\} C\$\{(d.source.x + d.target.x) / 2\},\$\{d.source.y\}
        \$\{(d.source.x + d.target.x) / 2\},\$\{d.target.y\} \$\{d.target.x\},\$\{d.target.y\}`;
                    }

                    path.setAttribute("d", pathData);
                    g.appendChild(path);
                });

                // Add nodes
                nodes.forEach(function (d) {
                    const nodeGroup = document.createElementNS("http://www.w3.org/2000/svg", "g");
                    nodeGroup.setAttribute("class", "node");

                    nodeGroup.setAttribute("transform", "translate('"+d.x+"','"+d.y+"')");

                    if (collapsible) {
                        nodeGroup.onclick = function () {
                            if (d.children) {
                                d._children = d.children;
                                d.children = null;
                            } else if (d._children) {
                                d.children = d._children;
                            }
                            update(d);
                        };
                    }

                    // Node circle
                    const circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
                    circle.setAttribute("class", "node-circle");
                    circle.setAttribute("r", nodeRadius);
                    circle.setAttribute("fill", d.color);
                    nodeGroup.appendChild(circle);

                    // Node label
                    const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
                    text.setAttribute("class", "node-label");
                    text.setAttribute("fill", "#000000");
                    text.textContent = d.name;
                    nodeGroup.appendChild(text);

                    // Add collapse/expand icon if the node has children
                    if (collapsible && (d.children || d._children)) {
                        const icon = document.createElementNS("http://www.w3.org/2000/svg", "text");
                        icon.setAttribute("class", "collapse-icon");
                        icon.setAttribute("x", 0);
                        icon.setAttribute("y", nodeRadius + 15);
                        icon.textContent = d.children ? "-" : "+";
                        nodeGroup.appendChild(icon);
                    }

                    g.appendChild(nodeGroup);
                });
            }
        }

        // Initialize the tree layout when the SVG is loaded
        document.addEventListener("DOMContentLoaded", createTreeLayout);
        if (document.readyState === "complete" || document.readyState === "interactive") {
            setTimeout(createTreeLayout, 1);
        }
        ]]>
    </script>
</svg>